services:
  app:
    restart: always
    build:
      context: .
      dockerfile: images/app/Dockerfile
      args:
        UID: 1001
        GID: 1001
    networks:
      - backend
      - frontend
    volumes:
      - ./epivar/:/app/epivar/
      - epivar_media_volume:/opt/mediafiles/
      - epivar_static_volume:/var/www/staticfiles/
    depends_on:
      - db
      - redis
      - celery_worker
    env_file:
      - .env

  celery_worker:
    restart: always
    command: poetry run python -m celery --app=epivar.celery worker --autoscale=2,1 -E
    build:
      context: .
      dockerfile: images/app/Dockerfile
      args:
        UID: 1001
        GID: 1001
    networks:
      - backend
    volumes:
      - ./epivar/:/app/epivar/
      - epivar_media_volume:/opt/mediafiles/
    depends_on:
      - redis
    env_file:
      - .env

  redis:
    image: redis:latest
    restart: always
    command: redis-server --requirepass ${REDIS_PASS} --appendonly yes
    networks:
      - backend

  db:
    image: ankane/pgvector:latest
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - backend
    volumes:
      - epivar_postgres_data:/var/lib/postgresql/data

  flower:
    image: mher/flower:latest
    restart: always
    command: celery --broker=redis://:${REDIS_PASS}@redis:6379/0 flower --basic-auth="${FLOWER_USER}:${FLOWER_PASS}" --port=${FLOWER_PORT} --url_prefix=${FLOWER_ENDPOINT}
    depends_on:
      - redis
      - celery_worker
    networks:
      - backend
    env_file:
      - .env

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/cert/:/etc/ssl/certs/:ro
      - ./nginx/logs/:/var/log/nginx/
      - epivar_static_volume:/var/www/staticfiles/:ro
      - epivar_media_volume:/opt/mediafiles/
    networks:
      - backend
      - frontend
    env_file:
      - .env

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  epivar_postgres_data:
  epivar_static_volume:
  epivar_media_volume:
